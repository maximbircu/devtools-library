import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply from: '../../gradle/jacoco.gradle'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { it.generateBuildConfig.enabled = false }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        fromPreset(presets.iosX64, 'ios') {
            binaries { framework([DEBUG]) { baseName = "devtools" } }
            binaries { framework([RELEASE]) { baseName = "devtools" } }
        }

        fromPreset(presets.iosArm64, 'iosArm64') {
            binaries { framework { baseName = "devtools" } }
            sourceSets["iosArm64Main"].dependsOn(sourceSets["iosMain"])
        }

        fromPreset(presets.iosArm32, 'iosArm32') {
            binaries { framework { baseName = "devtools" } }
            sourceSets["iosArm32Main"].dependsOn(sourceSets["iosMain"])
        }

        presets.forEach { println(it.name) }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
            }
        }

        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
                implementation "io.mockk:mockk:1.9.3"
            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
            }
        }

        androidTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }

        iosMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.14.0"
            }
        }

        iosTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-testng"
            }
        }
    }

    task debugFatFramework(type: FatFrameworkTask) {
        baseName = "counter"
        destinationDir = file("$buildDir/fat-framework/debug")
        from(
                targets.ios.binaries.getFramework("DEBUG"),
                targets.iosArm32.binaries.getFramework("DEBUG"),
                targets.iosArm64.binaries.getFramework("DEBUG")
        )
    }

    task releaseFatFramework(type: FatFrameworkTask) {
        baseName = "counter"
        destinationDir = file("$buildDir/fat-framework/release")
        from(
                targets.ios.binaries.getFramework("RELEASE"),
                targets.iosArm32.binaries.getFramework("RELEASE"),
                targets.iosArm64.binaries.getFramework("RELEASE")
        )
    }

    afterEvaluate {
        tasks.forEach { task ->
            if (task.name.contains("assembleDebug")) {
                task.dependsOn "debugFatFramework"
            }
            if (task.name.contains("assembleRelease")) {
                task.dependsOn "releaseFatFramework"
            }
        }
    }
}
